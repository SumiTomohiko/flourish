
from flourish.char import Character
from flourish.core import CELL_SIZE, Images, TURN_LEFT_TABLE, TURN_RIGHT_TABLE

images = Images.new("pc", ["attack0.png", "attack1.png", "attack2.png", "attack3.png", "walk0.png", "walk1.png", "walk2.png", "walk3.png", "walk4.png", "walk5.png", "walk6.png", "walk7.png"])

def allocate_resources()
  images.allocate()
end

def free_resources()
  images.free()
end

FRAMES_PER_CELL = 20
PIXELS_PER_FRAME = CELL_SIZE // FRAMES_PER_CELL
IMG_TBL = [1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6, 6, 7, 7, 0, 0, 0, 0]

class PlayerCharacter > Character
  def init(x, y, direction)
    super(32, 32, x, y, direction)
    self.switch_image(0)
  end

  def move_right(ctrl)
    direction = self.direction
    if !ctrl.movable?(self, TURN_RIGHT_TABLE[direction])
      return
    end

    FRAMES_PER_CELL.times() do [i]
      if direction == 'north
        self.x += PIXELS_PER_FRAME
      elif direction == 'east
        self.y += PIXELS_PER_FRAME
      elif direction == 'south
        self.x -= PIXELS_PER_FRAME
      else
        self.y -= PIXELS_PER_FRAME
      end

      self.switch_image(IMG_TBL[i])
      Coroutine.yield()
    end
    ctrl.check_goal()
  end

  def switch_image(index)
    self.img = images["walk{0}.png".format(index)]
  end

  def move_left(ctrl)
    direction = self.direction
    if !ctrl.movable?(self, TURN_LEFT_TABLE[direction])
      return
    end

    FRAMES_PER_CELL.times() do [i]
      if direction == 'north
        self.x -= PIXELS_PER_FRAME
      elif direction == 'east
        self.y -= PIXELS_PER_FRAME
      elif direction == 'south
        self.x += PIXELS_PER_FRAME
      else
        self.y += PIXELS_PER_FRAME
      end

      self.switch_image(IMG_TBL[i])
      Coroutine.yield()
    end
    ctrl.check_goal()
  end

  def move_backward(len)
    direction = self.direction

    tbl = { 'north: 'south, 'east: 'west, 'west: 'east, 'south: 'north }
    if !ctrl.movable?(self, tbl[direction])
      return
    end

    FRAMES_PER_CELL.times() do [i]
      if direction == 'north
        self.y += PIXELS_PER_FRAME
      elif direction == 'east
        self.x -= PIXELS_PER_FRAME
      elif direction == 'south
        self.y -= PIXELS_PER_FRAME
      else
        self.x += PIXELS_PER_FRAME
      end

      self.switch_image(IMG_TBL[i])
      Coroutine.yield()
    end
    ctrl.check_goal()
  end

  def attack(ctrl, char)
    [2, 2, 1, 1, 0, 0, 0, 1, 2, 3, 3].each() do [index]
      self.img = images["attack{0}.png".format(index)]
      Coroutine.yield()
    end
    ctrl.attack_npc(char)
  end

  def move_forward(ctrl)
    direction = self.direction
    if !ctrl.movable?(self, direction)
      return
    end

  CORRECTION = [-2, -2, 3, 3, 4, 4, -1, -1, -4, -4, -2, -2, 3, 3, 4, 4, -1, -1, -4, -4]
    FRAMES_PER_CELL.times() do [i]
      if direction == 'north
        self.y -= PIXELS_PER_FRAME + CORRECTION[i]
      elif direction == 'east
        self.x += PIXELS_PER_FRAME + CORRECTION[i]
      elif direction == 'south
        self.y += PIXELS_PER_FRAME + CORRECTION[i]
      else
        self.x -= PIXELS_PER_FRAME + CORRECTION[i]
      end

      self.switch_image(IMG_TBL[i])
      Coroutine.yield()
    end
    ctrl.check_goal()
  end
end

# vim: tabstop=2 shiftwidth=2 expandtab softtabstop=2
