
from flourish.core import CELL_SIZE, MAP_SIZE, Point
from flourish.ctrl.main import Controller
from flourish.geometry.goal import Goal
from flourish.view.main import View

class Stage
  def init(map=nil, x=nil, y=nil, direction=nil, ctrl=Controller, view=View)
    self.map = map
    self.x = x
    self.y = y
    self.direction = direction
    self.ctrl = ctrl
    self.view = view
  end

  def allocate_resources(&block)
    block()
  end

  def make_models(pc)
    return nil
  end
end

class GameStage > Stage
  def init(map, x=nil, y=nil, direction=nil)
    # FIXME: super() at here cannot call Stage#init.
    #super(map, x, y, direction)
    self.map = self.generate_map(map)
    self.x = x
    self.y = y
    self.direction = direction
    self.ctrl = Controller
    self.view = View
  end

  def decide_goal_direction(index)
    if index.x == 0
      return 'west
    end
    if index.x == MAP_SIZE - 1
      return 'east
    end
    if index.y == 0
      return 'north
    end
    return 'south
  end

  def map_geometry(c, index)
    try
      return { "w": 'wall, " ": nil }[c]
    except KeyError
    end
    # TODO: assert c == 'goal
    return Goal.new(self.decide_goal_direction(index))
  end

  def overwrite_map(map)
    # Do nothing by default.
  end

  def generate_map(data)
    if data == nil
      return nil
    end

    lines = data.rtrim().split("\n")
    if lines.size != MAP_SIZE
      raise SyntaxError.new("Invalid Map height: {0}".format(lines.size))
    end
    map = []
    lines.each_with_index() do [y, s]
      line = []
      src = (s + (MAP_SIZE - s.size) * " ").split("")
      src.each_with_index() do [x, c]
        line << self.map_geometry(c, Point.new(x, y))
      end
      map << line
    end
    self.overwrite_map(map)
    return map
  end

  def index2pos(pos)
    return CELL_SIZE * pos + CELL_SIZE // 2
  end

  def update_pc(pc)
    if self.x != nil
      pc.x = self.index2pos(self.x)
    end
    if self.y != nil
      pc.y = self.index2pos(self.y)
    end
    if self.direction != nil
      pc.direction = self.direction
    end
  end

  def make_models(pc)
    self.update_pc(pc)
    return { 'pc: pc, 'map: self.map, 'npc: self.make_npc() }
  end

  def make_npc()
    return []
  end
end

class MiscStage > Stage
  def init(ctrl, view)
    # FIXME: super() at here cannot call Stage#init.
    #super(ctrl: ctrl, view: view)
    self.map = nil
    self.x = nil
    self.y = nil
    self.direction = nil
    self.ctrl = ctrl
    self.view = view
  end
end

# vim: tabstop=2 shiftwidth=2 expandtab softtabstop=2
