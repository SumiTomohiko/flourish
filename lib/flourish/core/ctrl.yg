
from sdl import SDL_BUTTON, SDL_BUTTON_LEFT
import yogame

from flourish.core import CELL_SIZE, CHAR_POS_OFFSET_X, CHAR_POS_OFFSET_Y, FPS, MAIN_VIEW_PC_X, MAIN_VIEW_PC_Y, MAIN_VIEW_X, MAIN_VIEW_Y, Point, Rect, TURN_LEFT_TABLE, TURN_RIGHT_TABLE

class Rect2Act
  def init(rect, act)
    self.pred? = rect.include?
    self.act = act
  end
end

class Controller > yogame.Controller
  def init(map, pc, npc)
    self.map = map
    self.pc = pc
    self.npc = npc
    self.npc.each(&self.place_npc)

    self.coroutine = nil
    self.coroutines = self.make_coroutines()

    x = MAIN_VIEW_X + MAIN_VIEW_PC_X
    y = MAIN_VIEW_Y + MAIN_VIEW_PC_Y
    pc_cell_left_x = x - CELL_SIZE // 2
    move_forward_area = Rect.new(pc_cell_left_x, y - CELL_SIZE - CELL_SIZE // 2)

    turn_area_y = y - CELL_SIZE
    pc_cell_right_x = x + CELL_SIZE // 2
    turn_left_area = Rect.new(pc_cell_left_x - CELL_SIZE, turn_area_y)
    turn_right_area = Rect.new(pc_cell_right_x, turn_area_y)

    backward_area_height = CELL_SIZE // 2
    move_backward_area = Rect.new(
      pc_cell_left_x, y + CELL_SIZE // 2,
      backward_area_height, backward_area_height)

    move_side_y = turn_area_y + CELL_SIZE
    move_left_area = Rect.new(pc_cell_left_x - CELL_SIZE, move_side_y)
    move_right_area = Rect.new(pc_cell_right_x, move_side_y)

    set_move_proc = self.set_move_proc
    on_forward_area_pressed = set_move_proc.partial(self.move_forward)
    on_backward_area_pressed = set_move_proc.partial(self.move_backward)
    on_left_area_pressed = set_move_proc.partial(self.move_left)
    on_right_area_pressed = set_move_proc.partial(self.move_right)
    self.rect2act = [
      Rect2Act.new(move_forward_area, on_forward_area_pressed),
      Rect2Act.new(turn_left_area, self.turn_left),
      Rect2Act.new(turn_right_area, self.turn_right),
      Rect2Act.new(move_backward_area, on_backward_area_pressed),
      Rect2Act.new(move_left_area, on_left_area_pressed),
      Rect2Act.new(move_right_area, on_right_area_pressed)]
    self.invalidate_move_proc()
  end

  def invalidate_move_proc()
    self.set_move_proc(nop)
  end

  def set_move_proc(f)
    self.move_proc = f
  end

  def movable?(char, direction)
    pos = self.get_next_pos(char.x, char.y, direction)
    return !self.wall?(pos.x, pos.y) && !self.conflict?(char, pos)
  end

  def get_index(x, y)
    return Point.new(x // CELL_SIZE, y // CELL_SIZE)
  end

  def conflict?(char, pos)
    index = self.get_index(pos.x, pos.y)
    ([self.pc] + self.npc).each() do [c]
      if c == char
        next
      end
      if (c.x - CHAR_POS_OFFSET_X) % CELL_SIZE == 0
        if c.x // CELL_SIZE != index.x
          next
        end
        top_y = c.y - CHAR_POS_OFFSET_Y
        if top_y // CELL_SIZE == index.y
          return true
        end
        if (top_y + CELL_SIZE - 1) // CELL_SIZE == index.y
          return true
        end
      elif (c.y - CHAR_POS_OFFSET_Y) % CELL_SIZE == 0
        if c.y // CELL_SIZE != index.y
          next
        end
        left_x = c.x - CHAR_POS_OFFSET_X
        if left_x // CELL_SIZE == index.x
          return true
        end
        if (left_x + CELL_SIZE - 1) // CELL_SIZE == index.x
          return true
        end
      end
    end
    return false
  end

  def move_char(char, direction, len)
    direction = char.direction
    if direction == 'north
      char.y -= len
    elif direction == 'east
      char.x += len
    elif direction == 'south
      char.y += len
    else
      char.x -= len
    end
  end

  def get_next_pos(x, y, direction)
    pos = Point.new(x, y)
    if direction == 'north
      pos.y -= CELL_SIZE
    elif direction == 'east
      pos.x += CELL_SIZE
    elif direction == 'west
      pos.x -= CELL_SIZE
    else
      pos.y += CELL_SIZE
    end
    return pos
  end

  def place_npc(obj)
    # FIXME: place NPC randomly
    obj.x = self.pc.x
    obj.y = self.pc.y
  end

  def attack_pc(strength)
    self.pc.life -= strength
  end

  def make_coroutines()
    return Array.new(self.npc.size) do [i]
      next Coroutine.new() do
        loop() do
          char = self.npc[i]
          if 0 < char.life
            char.act(self)
            next
          end
          Coroutine.yield()
        end
      end
    end
  end

  def remove_dead_coroutine()
    if (self.coroutine != nil) && self.coroutine.dead?
      self.coroutine = nil
    end
  end

  def start_coroutine()
    self.move_proc()
    if self.coroutine == nil
      return
    end
    self.coroutine.resume()
  end

  def animate()
    self.coroutines.each() do [coro]
      coro.resume()
    end
    self.remove_dead_coroutine()
    if self.coroutine == nil
      self.start_coroutine()
      return
    end
    self.coroutine.resume()
  end

  def move_right()
    self.coroutine = Coroutine.new(&self.pc.move_right.partial(self))
  end

  def move_left()
    self.coroutine = Coroutine.new(&self.pc.move_left.partial(self))
  end

  def move_backward()
    self.coroutine = Coroutine.new(&self.pc.move_backward.partial(self))
  end

  def geometry?(x, y, expected)
    return self.map[y // CELL_SIZE][x // CELL_SIZE] == expected
  end

  def wall?(x, y)
    return self.geometry?(x, y, 'wall)
  end

  def goal?()
    pc = self.pc
    return self.geometry?(pc.x, pc.y, 'goal)
  end

  def check_goal()
    if !self.goal?()
      return
    end
    puts("Conglaturation!")
  end

  def attack_npc(char)
    char.life -= self.pc.strength
  end

  def move_forward()
    pc = self.pc
    self.npc.each() do [char]
      if pc.attackable?(char) && (0 < char.life)
        self.attack_npc(char)
        return
      end
    end

    self.coroutine = Coroutine.new(&pc.move_forward.partial(self))
  end

  def turn(tbl)
    if self.coroutine != nil
      return
    end
    pc = self.pc
    pc.direction = tbl[pc.direction]
  end

  def turn_right()
    return self.turn(TURN_RIGHT_TABLE)
  end

  def turn_left()
    return self.turn(TURN_LEFT_TABLE)
  end

  def on_left_button_pressed(x, y)
    self.rect2act.each() do [obj]
      if obj.pred?(x, y)
        return obj.act()
      end
    end
  end

  def on_mousemotion(state, x, y, xrel, yrel)
    if state & SDL_BUTTON(SDL_BUTTON_LEFT) == 0
      return
    end
    return self.on_left_button_pressed(x, y)
  end

  def on_left_button_released(x, y)
    self.invalidate_move_proc()
  end
end

# vim: tabstop=2 shiftwidth=2 expandtab softtabstop=2
