
import sdl
sdl.SDL_BlitSurface = sdl.SDL_UpperBlit

def init(width, height, bpp, &block)
  sdl.SDL_Init(sdl.SDL_INIT_VIDEO)
  try
    flags = sdl.SDL_SWSURFACE | sdl.SDL_DOUBLEBUF | sdl.SDL_ANYFORMAT
    block(sdl.SDL_SetVideoMode(width, height, bpp, flags))
  finally
    sdl.SDL_Quit()
  end
end

def run(controller, view)
  event = sdl.SDL_Event.new()
  loop() do
    sdl.SDL_PollEvent.while(0, event) do
      if controller.dispatch(event)
        return
      end
    end
    view.draw()
  end
end

class Controller
  def on_middle_button_released(x, y)
  end

  def on_wheelup_button_released(x, y)
  end

  def on_wheeldown_button_released(x, y)
  end

  def on_right_button_released(x, y)
  end

  def on_left_button_released(x, y)
  end

  def on_middle_button_pressed(x, y)
  end

  def on_wheelup_button_pressed(x, y)
  end

  def on_wheeldown_button_pressed(x, y)
  end

  def on_right_button_pressed(x, y)
  end

  def on_left_button_pressed(x, y)
  end

  def on_mousebuttondown(button, state, x, y)
    BUTTON2NAME = {
      sdl.SDL_BUTTON_LEFT: "left", sdl.SDL_BUTTON_MIDDLE: "middle",
      sdl.SDL_BUTTON_RIGHT: "right", sdl.SDL_BUTTON_WHEELUP: "wheelup",
      sdl.SDL_BUTTON_WHEELDOWN: "wheeldown" }
    STATE2NAME = { sdl.SDL_PRESSED: "pressed", sdl.SDL_RELEASED: "released" }
    name = "on_{0}_button_{1}".format(BUTTON2NAME[button], STATE2NAME[state])
    return self.get_attr(name)(x, y)
  end

  def dispatch(event)
    if event.type == sdl.SDL_QUIT
      return true
    end
    if event.type == sdl.SDL_MOUSEBUTTONDOWN
      mouse_button_event = event.button
      button = mouse_button_event.button
      state = mouse_button_event.state
      x = mouse_button_event.x
      y = mouse_button_event.y
      return self.on_mousebuttondown(button, state, x, y)
    end
  end
end

class PlayerCharacter
  def init(x, y, direction)
    self.x = x
    self.y = y
    self.direction = direction # 'north, 'east, 'west or 'south
  end
end

MAP_UNIT_SIZE = 8

def pos2x(pos)
  return MAP_UNIT_SIZE * pos + MAP_UNIT_SIZE // 2
end

class StageController > Controller
  def init(map, pc)
    self.map = map
    self.pc = pc
  end

  def xy2map_unit(x, y)
    return self.map[x // MAP_UNIT_SIZE][y // MAP_UNIT_SIZE]
  end
end

def load_image(path)
  # TODO: Error handling
  return sdl.SDL_LoadBMP(path)
end

class View
  def init(map, pc, screen)
    self.map = map
    self.pc = pc
    self.screen = screen

    self.img = load_image("pc.bmp".to_path())
  end

  def draw()
    sdl.SDL_BlitSurface(self.img, nil, self.screen, nil)
    sdl.SDL_Flip(self.screen)
  end
end

def main()
  init(640, 480, 32) do [screen]
    map = [
      ['wall, 'wall, 'wall, 'wall, 'wall, 'wall, 'wall, 'wall],
      ['wall, nil, nil, nil, nil, nil, nil, 'wall],
      ['wall, nil, nil, nil, nil, nil, nil, 'wall],
      ['wall, nil, nil, nil, nil, nil, nil, 'wall],
      ['wall, nil, nil, nil, nil, nil, nil, 'wall],
      ['wall, nil, nil, nil, nil, nil, nil, 'wall],
      ['wall, nil, nil, nil, nil, nil, nil, 'wall],
      ['wall, 'wall, 'wall, 'wall, 'wall, 'wall, 'wall, 'wall]]
    pc = PlayerCharacter.new(pos2x(1), pos2x(1), 'south)
    run(StageController.new(map, pc), View.new(map, pc, screen))
  end
end

if ARGV.get(0) == __FILE__
  main()
end

# vim: tabstop=2 shiftwidth=2 expandtab softtabstop=2
