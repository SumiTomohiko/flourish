
import sdl
# XXX: h2yog cannot output SDL_BlitSurface. Wait for fixing this bug.
sdl.SDL_BlitSurface = sdl.SDL_UpperBlit

def init(width, height, bpp, &block)
  sdl.SDL_Init(sdl.SDL_INIT_VIDEO)
  try
    flags = sdl.SDL_SWSURFACE | sdl.SDL_DOUBLEBUF | sdl.SDL_ANYFORMAT
    block(sdl.SDL_SetVideoMode(width, height, bpp, flags))
  finally
    sdl.SDL_Quit()
  end
end

def run(controller, view)
  event = sdl.SDL_Event.new()
  loop() do
    sdl.SDL_PollEvent.while(1, event) do
      if controller.dispatch(event)
        return
      end
    end
    view.draw()
  end
end

BUTTON2NAME = {
  sdl.SDL_BUTTON_LEFT: "left", sdl.SDL_BUTTON_MIDDLE: "middle",
  sdl.SDL_BUTTON_RIGHT: "right", sdl.SDL_BUTTON_WHEELUP: "wheelup",
  sdl.SDL_BUTTON_WHEELDOWN: "wheeldown" }

class Controller
  def on_middle_button_released(x, y)
  end

  def on_wheelup_button_released(x, y)
  end

  def on_wheeldown_button_released(x, y)
  end

  def on_right_button_released(x, y)
  end

  def on_left_button_released(x, y)
  end

  def on_middle_button_pressed(x, y)
  end

  def on_wheelup_button_pressed(x, y)
  end

  def on_wheeldown_button_pressed(x, y)
  end

  def on_right_button_pressed(x, y)
  end

  def on_left_button_pressed(x, y)
  end

  def default_mousebutton_handler(button, x, y, suffix)
    name = "on_{0}_button_{1}".format(BUTTON2NAME[button], suffix)
    return self.get_attr(name)(x, y)
  end

  def on_mousebuttonup(button, x, y)
    return self.default_mousebutton_handler(button, x, y, "released")
  end

  def on_mousebuttondown(button, x, y)
    return self.default_mousebutton_handler(button, x, y, "pressed")
  end

  def fire_mousebutton_handler(event, f)
    mouse_button_event = event.button
    button = mouse_button_event.button
    x = mouse_button_event.x
    y = mouse_button_event.y
    return f(button, x, y)
  end

  def dispatch(event)
    if event.type == sdl.SDL_QUIT
      return true
    end
    if event.type == sdl.SDL_MOUSEBUTTONDOWN
      return self.fire_mousebutton_handler(event, self.on_mousebuttondown)
    end
    if event.type == sdl.SDL_MOUSEBUTTONUP
      return self.fire_mousebutton_handler(event, self.on_mousebuttonup)
    end
  end
end

class PlayerCharacter
  def init(x, y, direction)
    self.x = x
    self.y = y
    self.direction = direction # 'north, 'east, 'west or 'south
  end
end

CELL_SIZE = 80

def pos2x(pos)
  return CELL_SIZE * pos + CELL_SIZE // 2
end

class StageController > Controller
  def init(map, pc)
    self.map = map
    self.pc = pc
  end

  def on_left_button_pressed(x, y)
    pc = self.pc
    if pc.y < CELL_SIZE
      return
    end
    pc.y -= CELL_SIZE
  end
end

class DwarfException > Exception
end

def load_image(path)
  if (img = sdl.SDL_LoadBMP(path)) == nil
    # TODO: Give error messages from SDL
    raise DwarfException.new("Cannot load image of {0}".format(path))
  end
  return img
end

MAIN_VIEW_X = 120
MAIN_VIEW_Y = 40
MAIN_VIEW_WIDTH = 400
MAIN_VIEW_HEIGHT = 400
MAIN_VIEW_PC_X = MAIN_VIEW_WIDTH // 2
MAIN_VIEW_PC_Y = MAIN_VIEW_HEIGHT - CELL_SIZE

class View
  def cleanup_images()
    [self.pc_img, self.wall_img, self.ground_img].select() do [img]
      next img != nil
    end.each() do [img]
      sdl.SDL_FreeSurface(img)
    end
  end

  def init(map, pc, screen, &block)
    self.map = map
    self.pc = pc
    self.screen = screen

    self.pc_img = nil
    self.wall_img = nil
    self.ground_img = nil
    try
      self.pc_img = load_image("pc.bmp".to_path())
      self.wall_img = load_image("wall.bmp".to_path())
      self.ground_img = load_image("ground.bmp".to_path())
      block(self)
    finally
      self.cleanup_images()
    end
  end

  def get_surface(x, y)
    if (x < 0) || (y < 0)
      return nil
    end
    try
      geometry = self.map[y][x]
    except IndexError
      return nil
    end
    return { 'wall: self.wall_img }.get(geometry, self.ground_img)
  end

  def blit_surface(src, srcrect, dstrect)
    if src == nil
      return
    end
    if sdl.SDL_BlitSurface(src, srcrect, self.screen, dstrect) != 0
      raise DwarfException.new("SDL_BlitSurface failed")
    end
  end

  def min(n, m)
    return n < m ? n : m
  end

  def fill_rect()
    if sdl.SDL_FillRect(self.screen, nil, 0) != 0
      # TODO: Add SDL error messages
      raise DwarfException.new("SDL_FillRect failed")
    end
  end

  def draw_north()
    pc = self.pc
    left = pc.x - MAIN_VIEW_PC_X
    top = pc.y - MAIN_VIEW_PC_Y
    right = left + MAIN_VIEW_WIDTH
    bottom = top + MAIN_VIEW_HEIGHT

    srcrect = sdl.SDL_Rect.new()
    dstrect = sdl.SDL_Rect.new()

    y = top
    dstrect.y = MAIN_VIEW_Y
    j = y // CELL_SIZE
    while y < bottom
      srcrect.y = y - j * CELL_SIZE
      srcrect.h = self.min(bottom - y, CELL_SIZE)
      dstrect.h = srcrect.h

      x = left
      dstrect.x = MAIN_VIEW_X
      i = x // CELL_SIZE
      while x < right
        src = self.get_surface(i, j)
        srcrect.x = x - i * CELL_SIZE
        srcrect.w = self.min(right - x, CELL_SIZE)
        dstrect.w = srcrect.w
        self.blit_surface(src, srcrect, dstrect)

        x += dstrect.w
        dstrect.x += dstrect.w
        i += 1
      end

      y += dstrect.h
      dstrect.y += dstrect.h
      j += 1
    end
  end

  def draw_east()
    # TODO
  end

  def draw_west()
    # TODO
  end

  def draw_south()
    # TODO
  end

  def draw()
    self.fill_rect()

    {
      'north: self.draw_north, 'east: self.draw_east, 'west: self.draw_west,
      'south: self.draw_south }[self.pc.direction]()

    sdl.SDL_Flip(self.screen)
  end
end

def main()
  init(640, 480, 32) do [screen]
    map = [
      ['wall, 'wall, 'wall, 'wall, 'wall, 'wall, 'wall, 'wall],
      ['wall, nil, nil, nil, nil, nil, nil, 'wall],
      ['wall, nil, nil, nil, nil, nil, nil, 'wall],
      ['wall, nil, nil, nil, nil, nil, nil, 'wall],
      ['wall, nil, nil, nil, nil, nil, nil, 'wall],
      ['wall, nil, nil, nil, nil, nil, nil, 'wall],
      ['wall, nil, nil, nil, nil, nil, nil, 'wall],
      ['wall, 'wall, 'wall, 'wall, 'wall, 'wall, 'wall, 'wall]]
    pc = PlayerCharacter.new(pos2x(1), pos2x(6), 'north)
    View.new(map, pc, screen) do [view]
      run(StageController.new(map, pc), view)
    end
  end
end

if ARGV.get(0) == __FILE__
  main()
end

# vim: tabstop=2 shiftwidth=2 expandtab softtabstop=2
